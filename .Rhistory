vchain = rep(list(NULL), options$nChains)
uchain = rep(list(NULL), options$nChains)
chain=1
vchain[[chain]] = read.csv(file = paste0(filePath, "vChain-", chain, ".csv"), header = FALSE)
dir(filePath)
filePath = "/Users/jonathantemplin/Documents/repos/blatent-main/gpdcm/"
vchain[[chain]] = read.csv(file = paste0(filePath, "vChain-", chain, ".csv"), header = FALSE)
dim(vchain[[chain]])
# strip off remaining NA column
vchain[[chain]] = vchain[[chain]][,1:ncol(vchain[[chain]])]
vchain[[chain]]
vchain[[chain]] = read.csv(file = paste0(filePath, "vChain-", chain, ".csv"), header = FALSE)
dim(vchain[[chain]])
# strip off remaining NA column
vchain[[chain]] = vchain[[chain]][,1:(1-ncol(vchain[[chain]]))]
# strip off remaining NA column
vchain[[chain]] = vchain[[chain]][,1:(ncol(vchain[[chain]])-1)]
dim(vchain[[chain]])
# add parameter names
names(vchain[[chain]]) = c("chain", "iteration", specs$parameters)
vchain[[chain]]
library(blatent)
coda::as.mcmc(vchain[[chain]])
vchain[[chain]] = coda::mcmc(vchain[[chain]][3,ncol(vchain[[chain]])])
for (chain in 1:options$nChains){
# system(paste0(filePath, "./GPDCMRunning ", filePath, " ", chain))
vchain[[chain]] = read.csv(file = paste0(filePath, "vChain-", chain, ".csv"), header = FALSE)
dim(vchain[[chain]])
# strip off remaining NA column
vchain[[chain]] = vchain[[chain]][,1:(ncol(vchain[[chain]])-1)]
# add parameter names
names(vchain[[chain]]) = c("chain", "iteration", specs$parameters)
vchain[[chain]] = coda::mcmc(vchain[[chain]][3,ncol(vchain[[chain]])])
uchain[[chain]] = read.csv(file = paste0(filePath, "uChain-", chain, ".csv"), header = FALSE)
}
mcmc.list(vchain)
test = mcmc.list(vchain)
plot(test)
class(vchain[[1]])
mcmc.list(vchain)
vchain = as.mcmc.list(vchain)
plot(vchain)
dim(vchain)
length(vchain)
vchain[[1]]
chain=1
for (chain in 1:options$nChains){
# system(paste0(filePath, "./GPDCMRunning ", filePath, " ", chain))
vchain[[chain]] = read.csv(file = paste0(filePath, "vChain-", chain, ".csv"), header = FALSE)
dim(vchain[[chain]])
# strip off remaining NA column
vchain[[chain]] = vchain[[chain]][,1:(ncol(vchain[[chain]])-1)]
# add parameter names
names(vchain[[chain]]) = c("chain", "iteration", specs$parameters)
vchain[[chain]] = coda::mcmc(vchain[[chain]][3,ncol(vchain[[chain]])])
uchain[[chain]] = read.csv(file = paste0(filePath, "uChain-", chain, ".csv"), header = FALSE)
}
plot(vchain)
plot(vchain[[1]])
class(vchain[[1]])
dim(vchain[[1]])
ncol(vchain[[1]])
# for each chain, call the program and give it the chain number
vchain = rep(list(NULL), options$nChains)
uchain = rep(list(NULL), options$nChains)
chain=1
temp = list()
for (chain in 1:options$nChains){
# system(paste0(filePath, "./GPDCMRunning ", filePath, " ", chain))
vchain[[chain]] = read.csv(file = paste0(filePath, "vChain-", chain, ".csv"), header = FALSE)
dim(vchain[[chain]])
# strip off remaining NA column
vchain[[chain]] = vchain[[chain]][,1:(ncol(vchain[[chain]])-1)]
# add parameter names
names(vchain[[chain]]) = c("chain", "iteration", specs$parameters)
temp[[chain]] = coda::mcmc(vchain[[chain]][3,ncol(vchain[[chain]])])
uchain[[chain]] = read.csv(file = paste0(filePath, "uChain-", chain, ".csv"), header = FALSE)
}
temp[[1]]
temp
# for each chain, call the program and give it the chain number
vchain = rep(list(NULL), options$nChains)
uchain = rep(list(NULL), options$nChains)
chain=1
temp = list()
for (chain in 1:options$nChains){
# system(paste0(filePath, "./GPDCMRunning ", filePath, " ", chain))
vchain[[chain]] = read.csv(file = paste0(filePath, "vChain-", chain, ".csv"), header = FALSE)
dim(vchain[[chain]])
# strip off remaining NA column
vchain[[chain]] = vchain[[chain]][,1:(ncol(vchain[[chain]])-1)]
# add parameter names
names(vchain[[chain]]) = c("chain", "iteration", specs$parameters)
vchain[[chain]] = coda::mcmc(vchain[[chain]][,3:ncol(vchain[[chain]])])
uchain[[chain]] = read.csv(file = paste0(filePath, "uChain-", chain, ".csv"), header = FALSE)
}
ncol(vchain[[1]])
vchain = as.mcmc.list(vchain)
plot(vchain)
gelman.diag(vchain)
gelman.diag(vchain, multivariate = FALSE)
summary(model01)
model01
devtools::load_all(".")
ls
# Need: add underlying variable name to variables object for each variable with underlying variables
#       Then, add parameters for overall joint distribution
#       Then, add specs to convert to fortran objects/files
seed = 10
library(blatent)
#
nObs = 1000
# new syntax to fix syntax errors
modelText = "
# Measurement Model
item1-item10 ~ A1
item11-item20 ~ A2
item21-item30 ~ A3
A1 ~ 1
A2 ~ A1
A3 ~ A1 + A2 + A1:A2
# Latent Variable Specifications:
A1 A2 A3 <- latent(unit = 'rows', distribution = 'bernoulli', structure = 'univariate', type = 'ordinal')
# Observed Variable Specifications:
item1-item30 <- observed(distribution = 'bernoulli', link = 'probit')
"
defaultSimulatedParameters = setDefaultSimulatedParameters(
observedIntercepts = "runif(n = 1, min = -2, max = -2)",
observedMainEffects = "runif(n = 1, min = 4, max = 4)",
observedInteractions = "runif(n = 1, min = 0, max = 0)",
latentIntercepts = "runif(n = 1, min = 0, max = 0)",
latentMainEffects  = "runif(n = 1, min = 0, max = 0)",
latentInteractions = "runif(n = 1, min = 0, max = 0)"
)
simulatedData = simulateData(modelText = modelText, nObs = nObs,
defaultSimulatedParameters = setDefaultSimulatedParameters(
observedIntercepts = "runif(n = 1, min = -2, max = -2)",
observedMainEffects = "runif(n = 1, min = 4, max = 4)",
observedInteractions = "runif(n = 1, min = 0, max = 0)",
latentIntercepts = "runif(n = 1, min = 0, max = 0)",
latentMainEffects  = "runif(n = 1, min = 0, max = 0)",
latentInteractions = "runif(n = 1, min = 0, max = 0)"
), seed = seed)
# modelText = "
#
# # Measurement Model
# item1 ~ A1+A2+A1*A2
# item2-item10 ~ A1
# item11-item20 ~ A2
# item21-item30 ~ A3
#
# # Latent Variable Specifications:
# A1 A2 A3 <- latent(unit = 'rows', distribution = 'mvbernoulli', structure = 'joint', type = 'ordinal', jointName = 'class')
#
# # Observed Variable Specifications:
# item1-item30 <- observed(distribution = 'bernoulli', link = 'probit')
# "
# write.csv(x = simulatedData$data, file = "data.csv")
dataMat = simulatedData$data
options = blatentControl(seed=seed, parallel=FALSE, nChains = 2, nBurnin = 1, nSampled = 50, nThin = 1, nCores = 4)
filePath = "/Users/jonathantemplin/Documents/repos/blatent-main/gpdcm/"
# print("from R: running model 1")
model01 = blatentEstimate(dataMat = dataMat, modelText = modelText, options = options)
summary(model01)
cat("Parameter Estimates:")
cat(rep("-", 90))
cat(paste0(rep("-", 80), collapse = "")))
cat(paste0(rep("-", 80), collapse = ""))
temp =printParameterEstimates(chainSummary = self$parameterSummary, specs = self$specs,
options = self$options, ...)
devtools::load_all(".")
temp =printParameterEstimates(chainSummary = self$parameterSummary, specs = self$specs,
options = self$options, ...)
temp =printParameterEstimates(chainSummary = self$parameterSummary, specs = self$specs,
options = self$options)
# format for numeric values
num.format  <- paste("%", max(8L, numDigits + 5L), ".", numDigits, "f", sep = "")
numDigits = 3L
specs = model01$specs
options = model01$options
# format for numeric values
num.format  <- paste("%", max(8L, numDigits + 5L), ".", numDigits, "f", sep = "")
num.format
char.format <- paste("%", max(8L, numDigits + 5L), "s", sep = "")
char.format
cat("\nParameter Estimates:\n\n")
chainSummaryP = apply(X = chainSummary, MARGIN = 2, FUN = function(x) return(sprintf(num.format,x)))
chainSummary = model01$parameterSummary
chainSummaryP = apply(X = chainSummary, MARGIN = 2, FUN = function(x) return(sprintf(num.format,x)))
chainSummaryP
cat(paste0(rep("-", 80)))
cat(paste0(rep("-", 80), collapse = ""))
cat("\nParameter Estimates:\n\n")
chainSummaryP = apply(X = chainSummary, MARGIN = 2, FUN = function(x) return(sprintf(num.format,x)))
cat(paste0(rep("-", 80), collapse = ""))
cat("\nParameter Estimates:")
cat(paste0(rep("-", 80), collapse = ""))
cat("\nParameter Estimates:")
cat(paste0(rep("-", 80), collapse = ""))
cat("\nParameter Estimates:");cat(paste0(rep("-", 80), collapse = ""))
cat("\nParameter Estimates: \n");cat(paste0(rep("-", 80), collapse = ""))
specs$allVariables
devtools::load_all(".")
# Need: add underlying variable name to variables object for each variable with underlying variables
#       Then, add parameters for overall joint distribution
#       Then, add specs to convert to fortran objects/files
seed = 10
library(blatent)
#
nObs = 1000
# new syntax to fix syntax errors
modelText = "
# Measurement Model
item1-item10 ~ A1
item11-item20 ~ A2
item21-item30 ~ A3
A1 ~ 1
A2 ~ A1
A3 ~ A1 + A2 + A1:A2
# Latent Variable Specifications:
A1 A2 A3 <- latent(unit = 'rows', distribution = 'bernoulli', structure = 'univariate', type = 'ordinal')
# Observed Variable Specifications:
item1-item30 <- observed(distribution = 'bernoulli', link = 'probit')
"
defaultSimulatedParameters = setDefaultSimulatedParameters(
observedIntercepts = "runif(n = 1, min = -2, max = -2)",
observedMainEffects = "runif(n = 1, min = 4, max = 4)",
observedInteractions = "runif(n = 1, min = 0, max = 0)",
latentIntercepts = "runif(n = 1, min = 0, max = 0)",
latentMainEffects  = "runif(n = 1, min = 0, max = 0)",
latentInteractions = "runif(n = 1, min = 0, max = 0)"
)
simulatedData = simulateData(modelText = modelText, nObs = nObs,
defaultSimulatedParameters = setDefaultSimulatedParameters(
observedIntercepts = "runif(n = 1, min = -2, max = -2)",
observedMainEffects = "runif(n = 1, min = 4, max = 4)",
observedInteractions = "runif(n = 1, min = 0, max = 0)",
latentIntercepts = "runif(n = 1, min = 0, max = 0)",
latentMainEffects  = "runif(n = 1, min = 0, max = 0)",
latentInteractions = "runif(n = 1, min = 0, max = 0)"
), seed = seed)
# modelText = "
#
# # Measurement Model
# item1 ~ A1+A2+A1*A2
# item2-item10 ~ A1
# item11-item20 ~ A2
# item21-item30 ~ A3
#
# # Latent Variable Specifications:
# A1 A2 A3 <- latent(unit = 'rows', distribution = 'mvbernoulli', structure = 'joint', type = 'ordinal', jointName = 'class')
#
# # Observed Variable Specifications:
# item1-item30 <- observed(distribution = 'bernoulli', link = 'probit')
# "
# write.csv(x = simulatedData$data, file = "data.csv")
dataMat = simulatedData$data
options = blatentControl(seed=seed, parallel=FALSE, nChains = 2, nBurnin = 1, nSampled = 50, nThin = 1, nCores = 4)
filePath = "/Users/jonathantemplin/Documents/repos/blatent-main/gpdcm/"
# print("from R: running model 1")
# parse model syntax
specs = initializeSpecs(modelText = modelText, dataMat = dataMat, options = options)
# set up data frame for modeling
data = createModelData(specs = specs)
# set up object for variables in graph
variables = createVariables(specs = specs, data = data, options = options)
#create parameter list that will build  chains later
specs$parameters = unlist(lapply(
X = variables,
FUN = function(x) {
if (!is.null(x$beta))
return(rownames(x$beta))
}
))
# create chain holders
blankChain = createBlankChainHolders(specs = specs, options = options)
temp = createFortranObjects(specs = specs, options = options, data = data, variables = variables, blankChain = blankChain)
# write data to disk for fortan-based program
write.table(x = temp$fspecs,     file = paste0(filePath, "fspecs.csv"), quote = FALSE, row.names = FALSE, col.names = FALSE, sep = ",")
write.table(x = temp$fvariables, file = paste0(filePath, "fvariables.csv"), quote = FALSE, row.names = FALSE, col.names = FALSE, sep = ",")
write.table(x = temp$fpriors,    file = paste0(filePath, "fpriors.csv"), quote = FALSE, row.names = FALSE, col.names = FALSE, sep = ",")
write.table(x = temp$fdata,      file = paste0(filePath, "fdata.csv"), quote = FALSE, row.names = FALSE, col.names = FALSE, sep = ",")
write.table(x = temp$finit,      file = paste0(filePath, "finit.csv"), quote = FALSE, row.names = FALSE, col.names = FALSE, sep = ",")
write.table(x = temp$fmodel,     file = paste0(filePath, "fmodel.csv"), quote = FALSE, row.names = FALSE, col.names = FALSE, sep = ",")
write.table(x = temp$fmodelrows, file = paste0(filePath, "fmodelrows.csv"), quote = FALSE, row.names = FALSE, col.names = FALSE, sep = ",")
temp = NULL
# for each chain, call the program and give it the chain number
vchain = rep(list(NULL), options$nChains)
uchain = rep(list(NULL), options$nChains)
chain=1
for (chain in 1:options$nChains){
system(paste0(filePath, "./GPDCMRunning ", filePath, " ", chain))
vchain[[chain]] = read.csv(file = paste0(filePath, "vChain-", chain, ".csv"), header = FALSE)
# strip off remaining NA column
vchain[[chain]] = vchain[[chain]][,1:(ncol(vchain[[chain]])-1)]
# add parameter names
names(vchain[[chain]]) = c("chain", "iteration", specs$parameters)
vchain[[chain]] = coda::mcmc(vchain[[chain]][,3:ncol(vchain[[chain]])])
uchain[[chain]] = read.csv(file = paste0(filePath, "uChain-", chain, ".csv"), header = FALSE)
}
vchain = as.mcmc.list(vchain)
model = blatentModel$new(data = dataMat, specs = specs, options = options, chain = vchain, variables = variables)
model$parameterSummary
summary(model)
model$summary(model, screenPrint=FALSE)
# prepare summary of chain estimates here
model$chain
stackedChain = coda::mcmc(do.call("rbind", lapply(
X = chain,
FUN = function(x)
return(as.matrix(x))
)))
# build massive matrix of parameters by statistics
chainSummary = summary(chain)
# build massive matrix of parameters by statistics
chainSummary = summary(chain)
chainSummary = cbind(chain$statistics, chain$quantiles)
# add HDPIs:
HDPI = coda::HPDinterval(coda::mcmc(stackedChain), prob = HPDIval)
colnames(HDPI) = c("lowerHDPI95", "upperHDPI95")
# add HDPIs:
HDPI = coda::HPDinterval(coda::mcmc(stackedChain), prob = HPDIval)
c(paste0("lowerHDPI", HPDIval), paste0("upperHDPI95", HPDIval))
HPDIval = .95
# add HDPIs:
HDPI = coda::HPDinterval(coda::mcmc(stackedChain), prob = HPDIval)
stackedChain
chain
chain=vchain
stackedChain = coda::mcmc(do.call("rbind", lapply(
X = chain,
FUN = function(x)
return(as.matrix(x))
)))
# build massive matrix of parameters by statistics
chainSummary = summary(chain)
chainSummary = cbind(chain$statistics, chain$quantiles)
# add HDPIs:
HDPI = coda::HPDinterval(coda::mcmc(stackedChain), prob = HPDIval)
colnames(HDPI) = c(paste0("lowerHDPI", HPDIval), paste0("upperHDPI95", HPDIval))
chainSummary = cbind(chainSummary, HDPI)
convergenceDiagnostics = coda::gelman.diag(chain, multivariate = FALSE)
colnames(convergenceDiagnostics$psrf) = c("PSRF Point Est.", "PSRF Upper C.I.")
colnames(convergenceDiagnostics$psrf) = c("PSRF", "PSRF Upper C.I.")
chainSummary = cbind(chainSummary, convergenceDiagnostics$psrf)
devtools::load_all(".")
devtools::load_all(".")
model$parameterSummary = makeChainSummary(chain = vchain)
model$parameterSummary
class(chain)
chain
if (class(chain) == "mcmc.list"){
stackedChain = coda::mcmc(do.call("rbind", lapply(
X = chain,
FUN = function(x)
return(as.matrix(x))
)))
nChains = length(chain)
} else {
nChains = 1
}
# build massive matrix of parameters by statistics
chainSummary = summary(chain)
chainSummary = cbind(chain$statistics, chain$quantiles)
# add HDPIs:
HDPI = coda::HPDinterval(coda::mcmc(stackedChain), prob = HPDIval)
colnames(HDPI) = c(paste0("lowerHDPI", HPDIval), paste0("upperHDPI95", HPDIval))
chainSummary = cbind(chainSummary, HDPI)
if (nChains > 1){
convergenceDiagnostics = coda::gelman.diag(chain, multivariate = FALSE)
colnames(convergenceDiagnostics$psrf) = c("PSRF", "PSRF Upper C.I.")
chainSummary = cbind(chainSummary, convergenceDiagnostics$psrf)
} else {
convergenceDiagnostics = coda::heidel.diag(parameterChain)
temp = convergenceDiagnostics[[1]][1:nrow(convergenceDiagnostics[[1]]), c(3,4)]
colnames(temp) = c("Heidel.Diag p-value", "Heidel.Diag Htest")
chainSummary = cbind(chainSummary, temp)
}
chainSummary
# build massive matrix of parameters by statistics
chainSummary = summary(chain)
chainSummary
devtools::load_all(".")
model$parameterSummary = makeChainSummary(chain = vchain)
model$parameterSummary
devtools::load_all(".")
# print parameter estimates
temp = printParameterEstimates(chainSummary = model$parameterSummary, specs = model$specs, options = model$options)
specs$allVariables
variables[["item1"]]
variables[["item1"]]$paramNames
for (variable in specs$allVariables){
cat(paste0("  ", variable))
}
cat(paste0("  ", variable, "\n"))
for (variable in specs$allVariables){
cat(paste0("  ", variable, "\n"))
}
cat("\nParameter Estimates: \n");cat(paste0(rep("-", 80), collapse = ""))
chainSummaryP = apply(X = chainSummary, MARGIN = 2, FUN = function(x) return(sprintf(num.format,x)))
rownames(chainSummary)
chainSummary
chainSummary = model$parameterSummary
chainSummary
rownames(chainSummary)
colnames(chainSummaryP) = sprintf(char.format, colnames(chainSummary[, c("Mean", "SD", "lowerHDPI0.95", "upperHDPI950.95", "PSRF")]))
colnames(chainSummaryP) = sprintf(char.format, c("Mean", "SD", "lowerHDPI0.95", "upperHDPI950.95", "PSRF"))
c("Mean", "SD", "lowerHDPI0.95", "upperHDPI950.95", "PSRF")
sprintf(char.format, c("Mean", "SD", "lowerHDPI0.95", "upperHDPI950.95", "PSRF"))
colnames(chainSummaryP) = sprintf(char.format, c("Mean", "SD", "LowHPDI", "UpHDPI", "PSRF"))
sprintf(char.format, c("Mean", "SD", "LowHPDI", "UpHDPI", "PSRF"))
cat(paste0("      ", param, collapse=""))
for (variable in specs$allVariables){
cat(paste0("  ", variable, ":\n"))
for (param in variables[[variable]]$paramNames){
csRow = which(rownames(chainSummary) == param)
cat(paste0("      ", param, collapse=""))
}
}
for (variable in specs$allVariables){
for (variable in specs$allVariables){
cat(paste0("  ", variable, ":\n"))
for (param in variables[[variable]]$paramNames){
csRow = which(rownames(chainSummary) == param)
cat(paste0("      ", param, "\n", collapse=""))
}
}
for (variable in specs$allVariables){
cat(paste0("  ", variable, ":\n"))
for (param in variables[[variable]]$paramNames){
csRow = which(rownames(chainSummary) == param)
cat(paste0("      ", param, "\n"))
}
}
cat(sprintf(num.format), chainSummary[csRow, c("Mean", "SD", "LowHPDI", "UpHDPI", "PSRF")])
cat(sprintf(num.format, chainSummary[csRow, c("Mean", "SD", "LowHPDI", "UpHDPI", "PSRF")]))
csRow
chainSummary[csRow, c("Mean", "SD", "LowHPDI", "UpHDPI", "PSRF")]
chainSummary[csRow, c("Mean", "SD", "LowHPDI", "UpHDPI", "PSRF")]
cat(sprintf(num.format, chainSummary[csRow, c("Mean", "SD", "lowerHDPI0.95", "upperHDPI950.95", "PSRF")]))
cat(paste0(rep(" ", 40), sprintf(char.format, c("Mean", "SD", "LowHPDI", "UpHDPI", "PSRF"))
cat(paste0(rep(" ", 40), sprintf(char.format, c("Mean", "SD", "LowHPDI", "UpHDPI", "PSRF"))
cat(paste0(rep(" ", 40), sprintf(char.format, c("Mean", "SD", "LowHPDI", "UpHDPI", "PSRF"))))
paste0(rep(" ", 40), sprintf(char.format, c("Mean", "SD", "LowHPDI", "UpHDPI", "PSRF")))
cat(c(rep(" ", 40), sprintf(char.format, c("Mean", "SD", "LowHPDI", "UpHDPI", "PSRF"))))
for (variable in specs$allVariables){
cat(paste0("  ", variable, ":\n"))
for (param in variables[[variable]]$paramNames){
csRow = which(rownames(chainSummary) == param)
cat(paste0("      ", param, "\n"))
cat(c(rep(" ", 40), sprintf(num.format, chainSummary[csRow, c("Mean", "SD", "lowerHDPI0.95", "upperHDPI950.95", "PSRF")])))
}
}
cat("\nParameter Estimates: \n");cat(paste0(rep("-", 80), collapse = ""))
rep(" ", 40)
cat(c(paste0(rep(" ", 40), collapse = ""), sprintf(char.format, c("Mean", "SD", "LowHPDI", "UpHDPI", "PSRF"))))
cat(c(paste0(rep(" ", 40), collapse = ""), sprintf(char.format, c("Mean", "SD", "LowHPDI", "UpHDPI", "PSRF"))))
sprintf(char.format, c("Mean", "SD", "LowHPDI", "UpHDPI", "PSRF")))
sprintf(char.format, c("Mean", "SD", "LowHPDI", "UpHDPI", "PSRF"))
cat(paste0(rep(" ", 40), sprintf(char.format, c("Mean", "SD", "LowHPDI", "UpHDPI", "PSRF")), collapse = ""))
tempSpace = paste0(rep(" ", 40), collapse = "")
headings = paste0(sprintf(char.format, c("Mean", "SD", "LowHPDI", "UpHDPI", "PSRF")), collapse = "")
headings
cat(paste0(tempSpace, headings, collapse = ""))
cat(paste0(tempSpace, headings, "\n", collapse = ""))
cat(paste0(rep("-", 80), "\n", collapse = ""))
cat(paste0(rep("-", 80), collapse = ""))
cat(paste0(tempSpace, headings, "\n", collapse = ""))
for (variable in specs$allVariables){
cat(paste0("  ", variable, ":\n"))
for (param in variables[[variable]]$paramNames){
csRow = which(rownames(chainSummary) == param)
cat(paste0("      ", param, "\n"))
cat(c(rep(" ", 40), sprintf(num.format, chainSummary[csRow, c("Mean", "SD", "lowerHDPI0.95", "upperHDPI950.95", "PSRF")])))
}
}
paste0("      ", param, "\n")
for (variable in specs$allVariables){
cat(paste0("  ", variable, ":\n"))
for (param in variables[[variable]]$paramNames){
csRow = which(rownames(chainSummary) == param)
cat(paste0("      ", param))
cat(c(rep(" ", 40), sprintf(num.format, chainSummary[csRow, c("Mean", "SD", "lowerHDPI0.95", "upperHDPI950.95", "PSRF")])))
}
}
for (variable in specs$allVariables){
cat(paste0("  ", variable, ":\n"))
for (param in variables[[variable]]$paramNames){
csRow = which(rownames(chainSummary) == param)
cat(paste0("      ", param))
cat("\n")
cat(c(rep(" ", 40), sprintf(num.format, chainSummary[csRow, c("Mean", "SD", "lowerHDPI0.95", "upperHDPI950.95", "PSRF")])))
}
}
devtools::load_all(".")
printParameterEstimates(chainSummary = model$parameterSummary, specs = model$specs, options = model$options)
devtools::load_all(".")
printParameterEstimates(chainSummary = model$parameterSummary, specs = model$specs, options = model$options)
devtools::load_all(".")
printParameterEstimates(chainSummary = model$parameterSummary, specs = model$specs, options = model$options)
paramVals = sprintf(num.format, chainSummary[csRow, c("Mean", "SD", "lowerHDPI0.95", "upperHDPI950.95", "PSRF")])
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
paramVals
paste0(tempSpace, paramVals, collapse = "")
devtools::load_all(".")
paste0(tempSpace, paramVals, collapse = "")
paramVals = sprintf(num.format, chainSummary[csRow, c("Mean", "SD", "lowerHDPI0.95", "upperHDPI950.95", "PSRF")])
printParameterEstimates(chainSummary = model$parameterSummary, specs = model$specs, options = model$options)
devtools::load_all(".")
printParameterEstimates(chainSummary = model$parameterSummary, specs = model$specs, options = model$options)
