# Need: add underlying variable name to variables object for each variable with underlying variables
#       Then, add parameters for overall joint distribution
#       Then, add specs to convert to fortran objects/files

seed = 10
library(blatent)
#

nObs = 1000


# new syntax to fix syntax errors

modelText = "

# Measurement Model

item1-item10 ~ A1
item11-item20 ~ A2
item21-item30 ~ A3

A1 ~ 1
A2 ~ A1
A3 ~ A1 + A2 + A1:A2

# Latent Variable Specifications:
A1 A2 A3 <- latent(unit = 'rows', distribution = 'bernoulli', structure = 'univariate', type = 'ordinal')

# Observed Variable Specifications:
item1-item30 <- observed(distribution = 'bernoulli', link = 'probit')
"
defaultSimulatedParameters = setDefaultSimulatedParameters(
  observedIntercepts = "runif(n = 1, min = -2, max = -2)",
  observedMainEffects = "runif(n = 1, min = 4, max = 4)",
  observedInteractions = "runif(n = 1, min = 0, max = 0)",
  latentIntercepts = "runif(n = 1, min = 0, max = 0)",
  latentMainEffects  = "runif(n = 1, min = 0, max = 0)",
  latentInteractions = "runif(n = 1, min = 0, max = 0)"
)
simulatedData = simulateData(modelText = modelText, nObs = nObs,
                             defaultSimulatedParameters = setDefaultSimulatedParameters(
                               observedIntercepts = "runif(n = 1, min = -2, max = -2)",
                               observedMainEffects = "runif(n = 1, min = 4, max = 4)",
                               observedInteractions = "runif(n = 1, min = 0, max = 0)",
                               latentIntercepts = "runif(n = 1, min = 0, max = 0)",
                               latentMainEffects  = "runif(n = 1, min = 0, max = 0)",
                               latentInteractions = "runif(n = 1, min = 0, max = 0)"
                             ), seed = seed)

# modelText = "
#
# # Measurement Model
# item1 ~ A1+A2+A1*A2
# item2-item10 ~ A1
# item11-item20 ~ A2
# item21-item30 ~ A3
#
# # Latent Variable Specifications:
# A1 A2 A3 <- latent(unit = 'rows', distribution = 'mvbernoulli', structure = 'joint', type = 'ordinal', jointName = 'class')
#
# # Observed Variable Specifications:
# item1-item30 <- observed(distribution = 'bernoulli', link = 'probit')
# "

# write.csv(x = simulatedData$data, file = "data.csv")
dataMat = simulatedData$data

options = blatentControl(seed=seed, parallel=FALSE, nChains = 2, nBurnin = 1, nSampled = 50, nThin = 1, nCores = 4)
filePath = "/Users/jonathantemplin/Documents/repos/blatent-main/gpdcm/"

# print("from R: running model 1")
model01 = blatentEstimate(dataMat = dataMat, modelText = modelText, options = options)

summary(model01)

